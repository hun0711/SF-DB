{"ast":null,"code":"import axios from \"axios\";\n\n//ID 중복체크 axios 로직\n/* export const idCheckDB = (id) => {\r\n  console.log(id);\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const response = axios({\r\n        method: \"get\", //조회이므로 GET방식\r\n        url: \"http://localhost:8000/register/idCheck\",\r\n        params: { id },\r\n      });\r\n      resolve(response);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}; */\n\nexport const idCheckDB = async id => {\n  console.log(id);\n  try {\n    const res = await axios.get(\"http://localhost:8000/register/idCheck\", {\n      params: {\n        id\n      }\n    });\n    return res.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n//회원가입 axios 로직\nexport const regInsertDB = data => {\n  console.log(data);\n  return new Promise((resolve, reject) => {\n    try {\n      const response = axios({\n        method: \"post\",\n        //@RequestBody\n        url: \"http://localhost:8000/register/userJoin\",\n        data: data\n      });\n      resolve(response);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};","map":{"version":3,"names":["axios","idCheckDB","id","console","log","res","get","params","data","error","regInsertDB","Promise","resolve","reject","response","method","url"],"sources":["C:/Users/carax/Desktop/사이드 프로젝트/SFDB-Project/front/src/axios/user/registerLogic.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n//ID 중복체크 axios 로직\r\n/* export const idCheckDB = (id) => {\r\n  console.log(id);\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const response = axios({\r\n        method: \"get\", //조회이므로 GET방식\r\n        url: \"http://localhost:8000/register/idCheck\",\r\n        params: { id },\r\n      });\r\n      resolve(response);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}; */\r\n\r\nexport const idCheckDB = async (id) => {\r\n  console.log(id);\r\n  try {\r\n    const res = await axios.get(\"http://localhost:8000/register/idCheck\", {\r\n      params: { id },\r\n    });\r\n    return res.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n//회원가입 axios 로직\r\nexport const regInsertDB = (data) => {\r\n  console.log(data);\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const response = axios({\r\n        method: \"post\", //@RequestBody\r\n        url: \"http://localhost:8000/register/userJoin\",\r\n        data: data,\r\n      });\r\n      resolve(response);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,EAAE,IAAK;EACrCC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;EACf,IAAI;IACF,MAAMG,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,wCAAwC,EAAE;MACpEC,MAAM,EAAE;QAAEL;MAAG;IACf,CAAC,CAAC;IACF,OAAOG,GAAG,CAACG,IAAI;EACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAIF,IAAI,IAAK;EACnCL,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;EACjB,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMC,QAAQ,GAAGd,KAAK,CAAC;QACrBe,MAAM,EAAE,MAAM;QAAE;QAChBC,GAAG,EAAE,yCAAyC;QAC9CR,IAAI,EAAEA;MACR,CAAC,CAAC;MACFI,OAAO,CAACE,QAAQ,CAAC;IACnB,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdI,MAAM,CAACJ,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}